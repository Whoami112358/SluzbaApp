@model IEnumerable<WebApplication2.Models.Harmonogram>
@{
    ViewData["Title"] = "HARMONOGRAM SŁUŻB";
}
<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Harmonogram Służb - Dyżurny</title>
    <style>
        body {
            font-family: 'Poppins', Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-image: linear-gradient(45deg, rgba(3, 34, 40, 0.6) 0%, rgba(15, 24, 16, 0.6) 100%), url('../harmonogrambg.png');
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            color: #ecf0f1;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            height: 100vh;
        }

        header {
            text-align: center;
            padding: 20px 0;
            height: 10%;
        }

        h1 {
            font-family: 'Special Elite', cursive;
            font-size: 48px;
            text-align: center;
            margin-top: 25px;
            margin-bottom: 25px;
            color: #ffffff;
        }


        a {
            text-decoration: none;
            color: #1abc9c;
            font-weight: bold;
            transition: color 0.3s ease;
        }


        table {
            margin-right: 50px;
            margin-left: 50px;
            width: 100%;
            border-collapse: collapse;
        }

            table th, table td {
                padding: 10px;
                text-align: center;
                border: 1px solid #ddd;
            }

            table th {
                top: 0;
                background-color: rgba(119, 131, 83, 1);
                color: white;
            }

            table td {
                background-color: rgba(172, 174, 165, 0.7);
            }
        /* Styl przekreślenia starego żołnierza */
        .strikethrough {
            text-decoration: line-through;
            color: red;
        }

        /* Styl dla komunikatów o błędach */
        .validation-summary-errors {
            background-color: rgba(231, 76, 60, 0.1);
            color: #e74c3c;
            padding: 10px;
            border: 1px solid #e74c3c;
            border-radius: 5px;
            margin-bottom: 15px;
        }

        /* Styl dla komunikatów o sukcesie */
        .validation-summary-success {
            background-color: rgba(76, 175, 80, 0.1);
            color: #4caf50;
            padding: 10px;
            border: 1px solid #4caf50;
            border-radius: 5px;
            margin-bottom: 15px;
        }
    </style>
</head>
<body>
    <header>
        <nav>
            <ul>
                <li><a href="@Url.Action("DyzurnyView", "Dyzurny")" style="color: #1abc9c;">Wróć do Strony głównej</a></li>
                <li><a href="@Url.Action("DodajHarmonogramKC", "Dyzurny")">Dodaj Harmonogram</a></li>
            </ul>
        </nav>
    </header>

    <h1>Harmonogram Służb</h1>

    <!-- Przykładowy link do pobrania pliku -->
    <a href="@Url.Action("Download", "Dyzurny")" class="harm-downloadButt">
        Pobierz harmonogram
    </a>

    @* Wyświetlanie komunikatów o błędach *@
    @if (TempData["Error"] != null)
    {
        <div class="validation-summary-errors">
            <p>@TempData["Error"]</p>
        </div>
    }

    @* Wyświetlanie komunikatów o sukcesie *@
    @if (TempData["Success"] != null)
    {
        <div class="validation-summary-success">
            <p>@TempData["Success"]</p>
        </div>
    }

    <table>
        <thead>
            <tr>
                <th>ID Harmonogramu</th>
                <th>Data</th>
                <th>Żołnierz</th>
                <th>Służba</th>
                <th>Akcje</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                // Sprawdzenie, czy istnieje zastępca
                bool hasSubstitute = item.Zastepcy != null && item.Zastepcy.Any();
                var substitute = hasSubstitute ? item.Zastepcy.FirstOrDefault() : null;
                string substituteName = substitute != null && substitute.ZolnierzZastepowanego != null
                ? $"{substitute.ZolnierzZastepowanego.Imie} {substitute.ZolnierzZastepowanego.Nazwisko}"
                : "Brak";

                bool canAssignSubstitute = !hasSubstitute;

                <tr>
                    <td>@item.ID_Harmonogram</td>
                    <td>@item.Data.ToString("yyyy-MM-dd")</td>
                    <td>
                        @if (hasSubstitute && item.Zolnierz != null)
                        {
                            <span class="strikethrough">
                                @item.Zolnierz.Imie @item.Zolnierz.Nazwisko
                            </span>
                            <br />
                            <span>
                                @substituteName
                            </span>
                        }
                        else
                        {
                            @(item.Zolnierz != null
                                ? $"{item.Zolnierz.Imie} {item.Zolnierz.Nazwisko}"
                                : "Brak")
                        }
                    </td>
                    <td>@(item.Sluzba?.Rodzaj ?? "Brak")</td>
                    <td>
                        @if (canAssignSubstitute)
                        {
                            <a href="@Url.Action("PrzydzielZastepce", "Dyzurny", new { idHarmonogram = item.ID_Harmonogram })"
                               style="color: #e74c3c; font-weight: bold; text-decoration: none;">
                                Przydziel zastępcę
                            </a>
                        }
                        else
                        {
                            <span style="color: green; font-weight: bold;">Zastępca przydzielony</span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</body>
</html>
