@model IEnumerable<WebApplication2.Models.Harmonogram>
@{
    ViewData["Title"] = "HARMONOGRAM SŁUŻB";
    <link rel="stylesheet" href="https://db.onlinewebfonts.com/c/7aa6f23718712abc71a57b079ebadb52?family=Korolev+Military+Stencil+W00+Rg">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
    <link href='https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap' rel="stylesheet">
}

<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Harmonogram</title>
    <style>
        body {
            font-family: Poppins;
            margin: 0;
            padding: 0;
            background-image: linear-gradient(45deg, rgba(3, 34, 40, 0.6) 0%, rgba(15, 24, 16, 0.6) 100%), url('../harmonogrambg.png');
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            color: #ecf0f1;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            height: 100%;
            width: 100%;
        }

        h1 {
            font-family: 'Korolev Military Stencil W00 Rg';
            font-size: 48px;
            color: #ffffff;
            margin-bottom: 0px;
        }

        footer {
            text-align: center;
            padding: 10px;
            color: #ffffff;
            font-size: 14px;
            position: relative;
            margin-top: auto;
        }

            footer button {
                position: absolute;
                bottom: 10px;
                left: 10px;
                border: none;
                background: none;
                padding: 0;
                cursor: pointer;
            }

                footer button img {
                    width: 25px;
                    height: 24px;
                    display: block;
                }

        .content {
            display: flex;
            justify-content: center;
            align-items: flex-start;
            height: 90%;
            width: 100%;
            overflow: auto;
            margin: 0 auto;
            box-sizing: border-box;
        }

        table {
            margin-right: 50px;
            margin-left: 50px;
            width: 100%;
            border-collapse: collapse;
        }

            table th, table td {
                padding: 10px;
                text-align: center;
                border: 1px solid #ddd;
            }

            table th {
                top: 0;
                background-color: rgba(119, 131, 83, 1);
                color: white;
            }

            table td {
                background-color: rgba(172, 174, 165, 0.7);
            }

        th a {
            display: inline-block;
            text-decoration: none;
            margin: 0 2px;
        }

        .fa-arrow-up, .fa-arrow-down {
            font-size: 14px;
            color: #ffffff;
            margin-left: 5px;
            cursor: pointer;
        }

            .fa-arrow-up:hover, .fa-arrow-down:hover {
                color: #d0d0d0;
            }

        .strikethrough {
            text-decoration: line-through;
            color: red;
        }

        .zastepca-butt {
            font-family: Poppins;
            font-size: 18px;
            cursor: pointer;
            color: white;
            background-color: rgba(119, 131, 83, 1);
            border: none;
            border-radius: 30px;
            padding: 10px 20px;
            transition: background-color 0.3s ease, transform 0.3s ease;
        }

            .zastepca-butt:hover {
                background-color: rgba(0, 0, 0, 0.2);
                transform: scale(1.05);
            }

        .head-content {
            margin-left: 50px;
        }

        .download-butt:hover {
            filter: hue-rotate(90deg) brightness(0.7);
            scale(1.1);
        }

        /* --- DODANE --- */
        #chartContainer {
            width: 80%;
            margin: 20px auto;
            display: none; /* Początkowo ukrywamy wykres */
        }

        canvas {
            background-color: #ffffff;
        }
    </style>
</head>
<body>
    @{
        var replacedSoldiers = ViewBag.ReplacedSoldiers as Dictionary<int, int>;
        var zolnierzeDb = ViewBag.ZolnierzeDb as List<WebApplication2.Models.Zolnierz>;
    }

    <div class="head-content">
        <h1>@ViewData["Title"]</h1>

        <!-- Przycisk "Pobierz plik" -->
        <button class="download-butt" onclick="location.href='@Url.Action("Download")'"
                style="border: none; background: none; padding: 0; cursor: pointer; margin-bottom: 20px; transition: filter 0.3s ease, transform 0.3s ease;">
            <span style="font-family: Poppins; font-size: 24px; color: #ffffff;">
                Pobierz plik
            </span>
            <img src="../download2.png" />
        </button>

        <!-- Przycisk "Pokaż raport porównawczy" --> <!-- <--- DODANE! -->
        <button id="showChartBtn" class="zastepca-butt" style="margin-left: 20px;">
            Pokaż raport porównawczy
        </button>
    </div>

    <!-- Kontener na wykres słupkowy (Chart.js) -->  <!-- <--- DODANE! -->
    <div id="chartContainer">
        <canvas id="myChart"></canvas>
    </div>

    <div class="content">
        <table>
            <thead>
                <tr>
                    <th>
                        Data
                        <a href="@Url.Action("HarmonogramSorted", "Dyzurny", new { sortBy = "Data", isDescending = false })">
                            <i class="fa fa-arrow-up"></i>
                        </a>
                        <a href="@Url.Action("HarmonogramSorted", "Dyzurny", new { sortBy = "Data", isDescending = true })">
                            <i class="fa fa-arrow-down"></i>
                        </a>
                    </th>
                    <th>
                        Imię
                        <a href="@Url.Action("HarmonogramSorted", "Dyzurny", new { sortBy = "Imie", isDescending = false })">
                            <i class="fa fa-arrow-up"></i>
                        </a>
                        <a href="@Url.Action("HarmonogramSorted", "Dyzurny", new { sortBy = "Imie", isDescending = true })">
                            <i class="fa fa-arrow-down"></i>
                        </a>
                    </th>
                    <th>
                        Nazwisko
                        <a href="@Url.Action("HarmonogramSorted", "Dyzurny", new { sortBy = "Nazwisko", isDescending = false })">
                            <i class="fa fa-arrow-up"></i>
                        </a>
                        <a href="@Url.Action("HarmonogramSorted", "Dyzurny", new { sortBy = "Nazwisko", isDescending = true })">
                            <i class="fa fa-arrow-down"></i>
                        </a>
                    </th>
                    <th>Służba</th>
                    <th>Akcje</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>@item.Data.ToString("yyyy-MM-dd")</td>
                        <td>@item.Zolnierz?.Imie</td>
                        <td>@item.Zolnierz?.Nazwisko</td>
                        <td>@(item.Sluzba?.Rodzaj ?? "Brak")</td>
                        <td>
                            <button onclick="location.href='@Url.Action("PrzydzielZastepce", "Dyzurny", new { idHarmonogram = item.ID_Harmonogram })'" class="zastepca-butt">
                                Przydziel zastępcę
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <footer>
        <p>&copy; 2024 Twoja Aplikacja. Wszystkie prawa zastrzeżone.</p>
        <button onclick="location.href='@Url.Action("DyzurnyView", "Dyzurny")'">
            <img src="../back.png" alt="Powrót" />
        </button>
    </footer>

    <!-- Ładowanie biblioteki Chart.js i skrypt do generowania wykresu --> <!-- <--- DODANE! -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Zmienna do przechowywania instancji wykresu (aby go nie przeładowywać za każdym razem)
        let myChart;

        // Funkcja asynchroniczna pobierająca dane z kontrolera w formacie JSON
        async function loadChartData() {
            const response = await fetch('@Url.Action("GetRaportPorownawczyData", "Dyzurny")');
            const data = await response.json();

            // data: [{ pododdzialId: 1, count: 10 }, { pododdzialId: 2, count: 7 }, ...]
            const labels = data.map(item => 'Pododdział ' + item.pododdzialId);
            const counts = data.map(item => item.count);

            // Inicjalizacja wykresu Chart.js
            const ctx = document.getElementById('myChart').getContext('2d');
            myChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Liczba osób na służbie (w tym miesiącu)',
                        data: counts,
                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        // Obsługa kliknięcia w przycisk: wyświetlenie lub ukrycie wykresu
        const showChartBtn = document.getElementById('showChartBtn');
        const chartContainer = document.getElementById('chartContainer');
        let chartVisible = false;

        showChartBtn.addEventListener('click', async () => {
            chartVisible = !chartVisible;
            if (chartVisible) {
                chartContainer.style.display = 'block';
                showChartBtn.textContent = 'Ukryj';

                // Załaduj dane tylko raz, jeśli wykres jeszcze nie istnieje
                if (!myChart) {
                    await loadChartData();
                }
            } else {
                chartContainer.style.display = 'none';
                showChartBtn.textContent = 'Pokaż raport porównawczy';
            }
        });
    </script>
</body>
</html>
